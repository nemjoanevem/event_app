services:
  db:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports: ["${DB_PORT}:5432"]
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 3s
      timeout: 5s
      retries: 20

  backend:
    image: php:8.3-cli
    working_dir: /var/www
    volumes:
      - ./apps/backend:/var/www
    ports:
      - "${BACKEND_PORT}:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      APP_ENV: local
      APP_DEBUG: "true"
      APP_URL: ${APP_URL}
      DB_CONNECTION: pgsql
      DB_HOST: db
      DB_PORT: 5432
      DB_DATABASE: ${POSTGRES_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    command: |
      bash -lc "
        apt-get update && apt-get install -y libpq-dev postgresql-client git unzip libzip-dev &&
        docker-php-ext-install pdo pdo_pgsql mbstring bcmath zip &&
        curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer &&
        [ -f .env ] || cp .env.example .env &&
        composer install --no-interaction --prefer-dist --no-progress &&
        php artisan key:generate --force &&
        until pg_isready -h db -p 5432 -U ${POSTGRES_USER}; do echo 'waiting for db...'; sleep 2; done &&
        php artisan migrate --force &&
        php artisan db:seed --force &&
        php artisan serve --host=0.0.0.0 --port=8000
      "

  frontend:
    image: node:20
    working_dir: /app
    volumes:
      - ./apps/frontend:/app
    ports:
      - "${FRONTEND_PORT}:5173"
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:${BACKEND_PORT}/api}
      VITE_API_URL: ${VITE_API_URL:-http://localhost:${BACKEND_PORT}}
      VITE_BACKEND_URL: ${VITE_BACKEND_URL:-http://localhost:${BACKEND_PORT}}
    command: |
      bash -lc "
        [ -f .env ] || { [ -f .env.example ] && cp .env.example .env || true; } &&
        npm ci || npm install &&
        npm run dev -- --host 0.0.0.0 --port 5173
      "

volumes:
  db_data:
